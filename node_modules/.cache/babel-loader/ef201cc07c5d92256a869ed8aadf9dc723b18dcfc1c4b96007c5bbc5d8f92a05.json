{"ast":null,"code":"// Advanced analytics service for prop betting insights\nclass PropAnalyticsService {\n  constructor() {\n    this.trendAnalysis = new Map();\n    this.performanceMetrics = new Map();\n  }\n\n  // Calculate advanced betting metrics\n  calculateBettingMetrics(player, prop, line, period = 'Last 20') {\n    if (!player || !player.gameLog) {\n      return this.getDefaultMetrics();\n    }\n    const games = player.gameLog.slice(0, parseInt(period.split(' ')[1]));\n    const values = this.extractPropValues(games, prop);\n    return {\n      // Basic metrics\n      hitRate: this.calculateHitRate(values, line),\n      average: this.calculateAverage(values),\n      median: this.calculateMedian(values),\n      standardDeviation: this.calculateStandardDeviation(values),\n      // Advanced metrics\n      consistency: this.calculateConsistency(values),\n      trend: this.calculateTrend(values),\n      volatility: this.calculateVolatility(values),\n      // Betting insights\n      edge: this.calculateEdge(values, line),\n      confidence: this.calculateConfidence(values, line),\n      recommendation: this.getRecommendation(values, line),\n      // Performance metrics\n      streak: this.calculateStreak(values, line),\n      recentForm: this.calculateRecentForm(values, line),\n      homeAwaySplit: this.calculateHomeAwaySplit(games, prop, line),\n      // Statistical analysis\n      percentile: this.calculatePercentile(values, line),\n      probability: this.calculateProbability(values, line),\n      expectedValue: this.calculateExpectedValue(values, line)\n    };\n  }\n\n  // Extract prop values from games\n  extractPropValues(games, prop) {\n    return games.map(game => {\n      switch (prop) {\n        case 'Points':\n          return game.pts;\n        case 'Rebounds':\n          return game.reb;\n        case 'Assists':\n          return game.ast;\n        case '3-Pointers Made':\n          return game.threePM;\n        case 'Steals':\n          return game.stl;\n        case 'Blocks':\n          return game.blk;\n        case 'Pts+Reb+Ast':\n          return game.pts + game.reb + game.ast;\n        case 'Pts+Reb':\n          return game.pts + game.reb;\n        case 'Pts+Ast':\n          return game.pts + game.ast;\n        case 'Reb+Ast':\n          return game.reb + game.ast;\n        default:\n          return game.pts;\n      }\n    });\n  }\n\n  // Calculate hit rate\n  calculateHitRate(values, line) {\n    const hits = values.filter(value => value > parseFloat(line)).length;\n    return {\n      hits,\n      total: values.length,\n      percentage: values.length > 0 ? Math.round(hits / values.length * 100) : 0\n    };\n  }\n\n  // Calculate average\n  calculateAverage(values) {\n    return values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;\n  }\n\n  // Calculate median\n  calculateMedian(values) {\n    if (values.length === 0) return 0;\n    const sorted = [...values].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n  }\n\n  // Calculate standard deviation\n  calculateStandardDeviation(values) {\n    if (values.length === 0) return 0;\n    const avg = this.calculateAverage(values);\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;\n    return Math.sqrt(variance);\n  }\n\n  // Calculate consistency (lower is more consistent)\n  calculateConsistency(values) {\n    if (values.length === 0) return 0;\n    const avg = this.calculateAverage(values);\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;\n    return Math.round((1 - Math.sqrt(variance) / avg) * 100);\n  }\n\n  // Calculate trend (positive = improving, negative = declining)\n  calculateTrend(values) {\n    if (values.length < 3) return 0;\n    const recent = values.slice(0, Math.floor(values.length / 2));\n    const older = values.slice(Math.floor(values.length / 2));\n    const recentAvg = this.calculateAverage(recent);\n    const olderAvg = this.calculateAverage(older);\n    return Math.round((recentAvg - olderAvg) / olderAvg * 100);\n  }\n\n  // Calculate volatility\n  calculateVolatility(values) {\n    if (values.length === 0) return 0;\n    const avg = this.calculateAverage(values);\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;\n    return Math.round(Math.sqrt(variance) / avg * 100);\n  }\n\n  // Calculate betting edge\n  calculateEdge(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    const impliedProbability = 50; // Assuming -110 odds\n    return hitRate.percentage - impliedProbability;\n  }\n\n  // Calculate confidence level\n  calculateConfidence(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    const sampleSize = values.length;\n    if (sampleSize < 5) return 'Low';\n    if (sampleSize < 10) return 'Medium';\n    if (hitRate.percentage > 60 || hitRate.percentage < 40) return 'High';\n    return 'Medium';\n  }\n\n  // Get betting recommendation\n  getRecommendation(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    const edge = this.calculateEdge(values, line);\n    const trend = this.calculateTrend(values);\n    if (hitRate.percentage > 60 && edge > 5) return 'Strong Over';\n    if (hitRate.percentage > 55 && edge > 0) return 'Over';\n    if (hitRate.percentage < 40 && edge < -5) return 'Strong Under';\n    if (hitRate.percentage < 45 && edge < 0) return 'Under';\n    if (trend > 10) return 'Trending Up';\n    if (trend < -10) return 'Trending Down';\n    return 'No Edge';\n  }\n\n  // Calculate current streak\n  calculateStreak(values, line) {\n    if (values.length === 0) return {\n      type: 'none',\n      count: 0\n    };\n    let currentStreak = 0;\n    let streakType = values[0] > parseFloat(line) ? 'hit' : 'miss';\n    for (let i = 0; i < values.length; i++) {\n      const isHit = values[i] > parseFloat(line);\n      if (isHit && streakType === 'hit' || !isHit && streakType === 'miss') {\n        currentStreak++;\n      } else {\n        break;\n      }\n    }\n    return {\n      type: streakType,\n      count: currentStreak\n    };\n  }\n\n  // Calculate recent form (last 5 games)\n  calculateRecentForm(values, line) {\n    const recent = values.slice(0, 5);\n    const hitRate = this.calculateHitRate(recent, line);\n    return {\n      hits: hitRate.hits,\n      total: hitRate.total,\n      percentage: hitRate.percentage,\n      trend: this.calculateTrend(recent)\n    };\n  }\n\n  // Calculate home/away split\n  calculateHomeAwaySplit(games, prop, line) {\n    const homeGames = games.filter(game => game.opponent.includes('vs'));\n    const awayGames = games.filter(game => game.opponent.includes('@'));\n    const homeValues = this.extractPropValues(homeGames, prop);\n    const awayValues = this.extractPropValues(awayGames, prop);\n    return {\n      home: {\n        hitRate: this.calculateHitRate(homeValues, line),\n        average: this.calculateAverage(homeValues),\n        games: homeGames.length\n      },\n      away: {\n        hitRate: this.calculateHitRate(awayValues, line),\n        average: this.calculateAverage(awayValues),\n        games: awayGames.length\n      }\n    };\n  }\n\n  // Calculate percentile\n  calculatePercentile(values, line) {\n    if (values.length === 0) return 0;\n    const sorted = [...values].sort((a, b) => a - b);\n    const lineValue = parseFloat(line);\n    const belowLine = sorted.filter(val => val <= lineValue).length;\n    return Math.round(belowLine / values.length * 100);\n  }\n\n  // Calculate probability\n  calculateProbability(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    return hitRate.percentage / 100;\n  }\n\n  // Calculate expected value\n  calculateExpectedValue(values, line) {\n    const probability = this.calculateProbability(values, line);\n    const payout = 0.91; // Assuming -110 odds\n    return probability * payout - (1 - probability) * 1;\n  }\n\n  // Get default metrics\n  getDefaultMetrics() {\n    return {\n      hitRate: {\n        hits: 0,\n        total: 0,\n        percentage: 0\n      },\n      average: 0,\n      median: 0,\n      standardDeviation: 0,\n      consistency: 0,\n      trend: 0,\n      volatility: 0,\n      edge: 0,\n      confidence: 'Low',\n      recommendation: 'No Data',\n      streak: {\n        type: 'none',\n        count: 0\n      },\n      recentForm: {\n        hits: 0,\n        total: 0,\n        percentage: 0,\n        trend: 0\n      },\n      homeAwaySplit: {\n        home: {\n          hitRate: {\n            hits: 0,\n            total: 0,\n            percentage: 0\n          },\n          average: 0,\n          games: 0\n        },\n        away: {\n          hitRate: {\n            hits: 0,\n            total: 0,\n            percentage: 0\n          },\n          average: 0,\n          games: 0\n        }\n      },\n      percentile: 0,\n      probability: 0,\n      expectedValue: 0\n    };\n  }\n\n  // Generate betting insights\n  generateBettingInsights(player, prop, line, period = 'Last 20') {\n    const metrics = this.calculateBettingMetrics(player, prop, line, period);\n    const insights = [];\n\n    // Hit rate insights\n    if (metrics.hitRate.percentage > 60) {\n      insights.push({\n        type: 'positive',\n        title: 'Strong Hit Rate',\n        message: `${metrics.hitRate.percentage}% hit rate suggests value on the Over`\n      });\n    } else if (metrics.hitRate.percentage < 40) {\n      insights.push({\n        type: 'negative',\n        title: 'Low Hit Rate',\n        message: `${metrics.hitRate.percentage}% hit rate suggests value on the Under`\n      });\n    }\n\n    // Trend insights\n    if (metrics.trend > 10) {\n      insights.push({\n        type: 'positive',\n        title: 'Positive Trend',\n        message: `Player is trending up (+${metrics.trend}% vs earlier games)`\n      });\n    } else if (metrics.trend < -10) {\n      insights.push({\n        type: 'negative',\n        title: 'Negative Trend',\n        message: `Player is trending down (${metrics.trend}% vs earlier games)`\n      });\n    }\n\n    // Consistency insights\n    if (metrics.consistency > 80) {\n      insights.push({\n        type: 'neutral',\n        title: 'High Consistency',\n        message: `Very consistent performance (${metrics.consistency}% consistency)`\n      });\n    } else if (metrics.consistency < 50) {\n      insights.push({\n        type: 'warning',\n        title: 'High Volatility',\n        message: `Inconsistent performance (${metrics.consistency}% consistency)`\n      });\n    }\n\n    // Streak insights\n    if (metrics.streak.count > 3) {\n      insights.push({\n        type: metrics.streak.type === 'hit' ? 'positive' : 'negative',\n        title: `${metrics.streak.count}-Game ${metrics.streak.type === 'hit' ? 'Hit' : 'Miss'} Streak`,\n        message: `Currently on a ${metrics.streak.count}-game ${metrics.streak.type} streak`\n      });\n    }\n\n    // Recent form insights\n    if (metrics.recentForm.percentage > 70) {\n      insights.push({\n        type: 'positive',\n        title: 'Hot Recent Form',\n        message: `${metrics.recentForm.percentage}% hit rate in last 5 games`\n      });\n    } else if (metrics.recentForm.percentage < 30) {\n      insights.push({\n        type: 'negative',\n        title: 'Cold Recent Form',\n        message: `${metrics.recentForm.percentage}% hit rate in last 5 games`\n      });\n    }\n    return insights;\n  }\n}\n\n// Create singleton instance\nconst propAnalyticsService = new PropAnalyticsService();\nexport default propAnalyticsService;","map":{"version":3,"names":["PropAnalyticsService","constructor","trendAnalysis","Map","performanceMetrics","calculateBettingMetrics","player","prop","line","period","gameLog","getDefaultMetrics","games","slice","parseInt","split","values","extractPropValues","hitRate","calculateHitRate","average","calculateAverage","median","calculateMedian","standardDeviation","calculateStandardDeviation","consistency","calculateConsistency","trend","calculateTrend","volatility","calculateVolatility","edge","calculateEdge","confidence","calculateConfidence","recommendation","getRecommendation","streak","calculateStreak","recentForm","calculateRecentForm","homeAwaySplit","calculateHomeAwaySplit","percentile","calculatePercentile","probability","calculateProbability","expectedValue","calculateExpectedValue","map","game","pts","reb","ast","threePM","stl","blk","hits","filter","value","parseFloat","length","total","percentage","Math","round","reduce","sum","val","sorted","sort","a","b","mid","floor","avg","variance","pow","sqrt","recent","older","recentAvg","olderAvg","impliedProbability","sampleSize","type","count","currentStreak","streakType","i","isHit","homeGames","opponent","includes","awayGames","homeValues","awayValues","home","away","lineValue","belowLine","payout","generateBettingInsights","metrics","insights","push","title","message","propAnalyticsService"],"sources":["/Users/fredsales/Desktop/Wizards Player Prop Tool/src/services/propAnalyticsService.js"],"sourcesContent":["// Advanced analytics service for prop betting insights\nclass PropAnalyticsService {\n  constructor() {\n    this.trendAnalysis = new Map();\n    this.performanceMetrics = new Map();\n  }\n\n  // Calculate advanced betting metrics\n  calculateBettingMetrics(player, prop, line, period = 'Last 20') {\n    if (!player || !player.gameLog) {\n      return this.getDefaultMetrics();\n    }\n\n    const games = player.gameLog.slice(0, parseInt(period.split(' ')[1]));\n    const values = this.extractPropValues(games, prop);\n    \n    return {\n      // Basic metrics\n      hitRate: this.calculateHitRate(values, line),\n      average: this.calculateAverage(values),\n      median: this.calculateMedian(values),\n      standardDeviation: this.calculateStandardDeviation(values),\n      \n      // Advanced metrics\n      consistency: this.calculateConsistency(values),\n      trend: this.calculateTrend(values),\n      volatility: this.calculateVolatility(values),\n      \n      // Betting insights\n      edge: this.calculateEdge(values, line),\n      confidence: this.calculateConfidence(values, line),\n      recommendation: this.getRecommendation(values, line),\n      \n      // Performance metrics\n      streak: this.calculateStreak(values, line),\n      recentForm: this.calculateRecentForm(values, line),\n      homeAwaySplit: this.calculateHomeAwaySplit(games, prop, line),\n      \n      // Statistical analysis\n      percentile: this.calculatePercentile(values, line),\n      probability: this.calculateProbability(values, line),\n      expectedValue: this.calculateExpectedValue(values, line)\n    };\n  }\n\n  // Extract prop values from games\n  extractPropValues(games, prop) {\n    return games.map(game => {\n      switch(prop) {\n        case 'Points': return game.pts;\n        case 'Rebounds': return game.reb;\n        case 'Assists': return game.ast;\n        case '3-Pointers Made': return game.threePM;\n        case 'Steals': return game.stl;\n        case 'Blocks': return game.blk;\n        case 'Pts+Reb+Ast': return game.pts + game.reb + game.ast;\n        case 'Pts+Reb': return game.pts + game.reb;\n        case 'Pts+Ast': return game.pts + game.ast;\n        case 'Reb+Ast': return game.reb + game.ast;\n        default: return game.pts;\n      }\n    });\n  }\n\n  // Calculate hit rate\n  calculateHitRate(values, line) {\n    const hits = values.filter(value => value > parseFloat(line)).length;\n    return {\n      hits,\n      total: values.length,\n      percentage: values.length > 0 ? Math.round((hits / values.length) * 100) : 0\n    };\n  }\n\n  // Calculate average\n  calculateAverage(values) {\n    return values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;\n  }\n\n  // Calculate median\n  calculateMedian(values) {\n    if (values.length === 0) return 0;\n    const sorted = [...values].sort((a, b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n  }\n\n  // Calculate standard deviation\n  calculateStandardDeviation(values) {\n    if (values.length === 0) return 0;\n    const avg = this.calculateAverage(values);\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;\n    return Math.sqrt(variance);\n  }\n\n  // Calculate consistency (lower is more consistent)\n  calculateConsistency(values) {\n    if (values.length === 0) return 0;\n    const avg = this.calculateAverage(values);\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;\n    return Math.round((1 - (Math.sqrt(variance) / avg)) * 100);\n  }\n\n  // Calculate trend (positive = improving, negative = declining)\n  calculateTrend(values) {\n    if (values.length < 3) return 0;\n    const recent = values.slice(0, Math.floor(values.length / 2));\n    const older = values.slice(Math.floor(values.length / 2));\n    const recentAvg = this.calculateAverage(recent);\n    const olderAvg = this.calculateAverage(older);\n    return Math.round(((recentAvg - olderAvg) / olderAvg) * 100);\n  }\n\n  // Calculate volatility\n  calculateVolatility(values) {\n    if (values.length === 0) return 0;\n    const avg = this.calculateAverage(values);\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;\n    return Math.round((Math.sqrt(variance) / avg) * 100);\n  }\n\n  // Calculate betting edge\n  calculateEdge(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    const impliedProbability = 50; // Assuming -110 odds\n    return hitRate.percentage - impliedProbability;\n  }\n\n  // Calculate confidence level\n  calculateConfidence(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    const sampleSize = values.length;\n    \n    if (sampleSize < 5) return 'Low';\n    if (sampleSize < 10) return 'Medium';\n    if (hitRate.percentage > 60 || hitRate.percentage < 40) return 'High';\n    return 'Medium';\n  }\n\n  // Get betting recommendation\n  getRecommendation(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    const edge = this.calculateEdge(values, line);\n    const trend = this.calculateTrend(values);\n    \n    if (hitRate.percentage > 60 && edge > 5) return 'Strong Over';\n    if (hitRate.percentage > 55 && edge > 0) return 'Over';\n    if (hitRate.percentage < 40 && edge < -5) return 'Strong Under';\n    if (hitRate.percentage < 45 && edge < 0) return 'Under';\n    if (trend > 10) return 'Trending Up';\n    if (trend < -10) return 'Trending Down';\n    return 'No Edge';\n  }\n\n  // Calculate current streak\n  calculateStreak(values, line) {\n    if (values.length === 0) return { type: 'none', count: 0 };\n    \n    let currentStreak = 0;\n    let streakType = values[0] > parseFloat(line) ? 'hit' : 'miss';\n    \n    for (let i = 0; i < values.length; i++) {\n      const isHit = values[i] > parseFloat(line);\n      if ((isHit && streakType === 'hit') || (!isHit && streakType === 'miss')) {\n        currentStreak++;\n      } else {\n        break;\n      }\n    }\n    \n    return { type: streakType, count: currentStreak };\n  }\n\n  // Calculate recent form (last 5 games)\n  calculateRecentForm(values, line) {\n    const recent = values.slice(0, 5);\n    const hitRate = this.calculateHitRate(recent, line);\n    return {\n      hits: hitRate.hits,\n      total: hitRate.total,\n      percentage: hitRate.percentage,\n      trend: this.calculateTrend(recent)\n    };\n  }\n\n  // Calculate home/away split\n  calculateHomeAwaySplit(games, prop, line) {\n    const homeGames = games.filter(game => game.opponent.includes('vs'));\n    const awayGames = games.filter(game => game.opponent.includes('@'));\n    \n    const homeValues = this.extractPropValues(homeGames, prop);\n    const awayValues = this.extractPropValues(awayGames, prop);\n    \n    return {\n      home: {\n        hitRate: this.calculateHitRate(homeValues, line),\n        average: this.calculateAverage(homeValues),\n        games: homeGames.length\n      },\n      away: {\n        hitRate: this.calculateHitRate(awayValues, line),\n        average: this.calculateAverage(awayValues),\n        games: awayGames.length\n      }\n    };\n  }\n\n  // Calculate percentile\n  calculatePercentile(values, line) {\n    if (values.length === 0) return 0;\n    const sorted = [...values].sort((a, b) => a - b);\n    const lineValue = parseFloat(line);\n    const belowLine = sorted.filter(val => val <= lineValue).length;\n    return Math.round((belowLine / values.length) * 100);\n  }\n\n  // Calculate probability\n  calculateProbability(values, line) {\n    const hitRate = this.calculateHitRate(values, line);\n    return hitRate.percentage / 100;\n  }\n\n  // Calculate expected value\n  calculateExpectedValue(values, line) {\n    const probability = this.calculateProbability(values, line);\n    const payout = 0.91; // Assuming -110 odds\n    return (probability * payout) - ((1 - probability) * 1);\n  }\n\n  // Get default metrics\n  getDefaultMetrics() {\n    return {\n      hitRate: { hits: 0, total: 0, percentage: 0 },\n      average: 0,\n      median: 0,\n      standardDeviation: 0,\n      consistency: 0,\n      trend: 0,\n      volatility: 0,\n      edge: 0,\n      confidence: 'Low',\n      recommendation: 'No Data',\n      streak: { type: 'none', count: 0 },\n      recentForm: { hits: 0, total: 0, percentage: 0, trend: 0 },\n      homeAwaySplit: { home: { hitRate: { hits: 0, total: 0, percentage: 0 }, average: 0, games: 0 }, away: { hitRate: { hits: 0, total: 0, percentage: 0 }, average: 0, games: 0 } },\n      percentile: 0,\n      probability: 0,\n      expectedValue: 0\n    };\n  }\n\n  // Generate betting insights\n  generateBettingInsights(player, prop, line, period = 'Last 20') {\n    const metrics = this.calculateBettingMetrics(player, prop, line, period);\n    \n    const insights = [];\n    \n    // Hit rate insights\n    if (metrics.hitRate.percentage > 60) {\n      insights.push({\n        type: 'positive',\n        title: 'Strong Hit Rate',\n        message: `${metrics.hitRate.percentage}% hit rate suggests value on the Over`\n      });\n    } else if (metrics.hitRate.percentage < 40) {\n      insights.push({\n        type: 'negative',\n        title: 'Low Hit Rate',\n        message: `${metrics.hitRate.percentage}% hit rate suggests value on the Under`\n      });\n    }\n    \n    // Trend insights\n    if (metrics.trend > 10) {\n      insights.push({\n        type: 'positive',\n        title: 'Positive Trend',\n        message: `Player is trending up (+${metrics.trend}% vs earlier games)`\n      });\n    } else if (metrics.trend < -10) {\n      insights.push({\n        type: 'negative',\n        title: 'Negative Trend',\n        message: `Player is trending down (${metrics.trend}% vs earlier games)`\n      });\n    }\n    \n    // Consistency insights\n    if (metrics.consistency > 80) {\n      insights.push({\n        type: 'neutral',\n        title: 'High Consistency',\n        message: `Very consistent performance (${metrics.consistency}% consistency)`\n      });\n    } else if (metrics.consistency < 50) {\n      insights.push({\n        type: 'warning',\n        title: 'High Volatility',\n        message: `Inconsistent performance (${metrics.consistency}% consistency)`\n      });\n    }\n    \n    // Streak insights\n    if (metrics.streak.count > 3) {\n      insights.push({\n        type: metrics.streak.type === 'hit' ? 'positive' : 'negative',\n        title: `${metrics.streak.count}-Game ${metrics.streak.type === 'hit' ? 'Hit' : 'Miss'} Streak`,\n        message: `Currently on a ${metrics.streak.count}-game ${metrics.streak.type} streak`\n      });\n    }\n    \n    // Recent form insights\n    if (metrics.recentForm.percentage > 70) {\n      insights.push({\n        type: 'positive',\n        title: 'Hot Recent Form',\n        message: `${metrics.recentForm.percentage}% hit rate in last 5 games`\n      });\n    } else if (metrics.recentForm.percentage < 30) {\n      insights.push({\n        type: 'negative',\n        title: 'Cold Recent Form',\n        message: `${metrics.recentForm.percentage}% hit rate in last 5 games`\n      });\n    }\n    \n    return insights;\n  }\n}\n\n// Create singleton instance\nconst propAnalyticsService = new PropAnalyticsService();\n\nexport default propAnalyticsService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}